#!/usr/bin/env python3
import csv, os, re

CSV = "archive_working.csv"
DIR = "."

# Build a map of original → desired title
mapping = {}
with open(CSV, newline="", encoding="utf-8") as f:
    reader = csv.DictReader(f)
    for row in reader:
        orig = row["current_name"].strip()
        title = row["new_name"].strip()
        if title:
            mapping[orig] = title

# Turn titles into URL-style slugs
def slugify(s):
    s = s.lower()
    s = re.sub(r"[^\w\s-]", "", s)
    s = re.sub(r"\s+", "-", s)
    return re.sub(r"-{2,}", "-", s).strip("-")

# Rename loop
for fname in os.listdir(DIR):
    if not fname.lower().endswith(".pdf"):
        continue
    if fname not in mapping:
        print(f"⏭ skip (no entry): {fname}")
        continue

    m = re.match(r"([0-9]{4})-([0-9]{2})-[0-9]{2}", fname)
    if not m:
        print(f"⚠️ bad date format: {fname}")
        continue
    year, month = m.group(1), m.group(2)

    new = f"{year}-{month}-{slugify(mapping[fname])}.pdf"
    if os.path.exists(new):
        print(f"❌ target exists: {new}")
        continue

    os.rename(fname, new)
    print(f"✅ {fname} → {new}")#!/usr/bin/env python3
import csv
import os
import re

# 1) which CSV and which folder?
CSV = "archive_working.csv"
DIR = "."

# 2) load mapping {current_name.pdf → new_title}
mapping = {}
with open(CSV, newline="", encoding="utf-8") as f:
    reader = csv.DictReader(f)
    for row in reader:
        orig = row["current_name"].strip()
        title = row["new_name"].strip()
        if title:  # only if user supplied a new title
            mapping[orig] = title

# 3) helper to slugify a title
def slugify(s):
    s = s.lower()
    s = re.sub(r"[^\w\s-]", "", s)      # drop punctuation
    s = re.sub(r"\s+", "-", s)          # spaces → hyphens
    s = re.sub(r"-{2,}", "-", s)        # collapse multiple hyphens
    return s.strip("-")

# 4) loop over files in the folder
for fname in os.listdir(DIR):
    if not fname.lower().endswith(".pdf"):
        continue
    # only rename if in our CSV map
    if fname not in mapping:
        print(f"⏭  skip (no title): {fname}")
        continue

    # extract date prefix (YYYY-MM) from original filename
    m = re.match(r"([0-9]{4})-([0-9]{2})-[0-9]{2}", fname)
    if not m:
        print(f"⚠️  bad date format, skipping: {fname}")
        continue
    year, month = m.group(1), m.group(2)

    new_title = slugify(mapping[fname])
    new_fname = f"{year}-{month}-{new_title}.pdf"

    # avoid overwriting an existing file
    if os.path.exists(new_fname):
        print(f"❌  target exists, skipping: {new_fname}")
        continue

    os.rename(fname, new_fname)
    print(f"✅  {fname} → {new_fname}")
